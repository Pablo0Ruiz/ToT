DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS post;
DROP TABLE IF EXISTS post_image;
DROP TABLE IF EXISTS comment;
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS chatroom;
DROP TABLE IF EXISTS like;
DROP TABLE IF EXISTS follower;

CREATE TABLE user (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	username TEXT UNIQUE NOT NULL,
	password TEXT NOT NULL
);

CREATE TABLE post (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	author_id INTEGER NOT NULL,
	created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	title TEXT NOT NULL,
	body TEXT NOT NULL,
	body_html TEXT,
	FOREIGN KEY (author_id) REFERENCES user (id)
);

CREATE TABLE post_image (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	post_id INTEGER NOT NULL,
	filename TEXT NOT NULL, 
	FOREIGN KEY (post_id) REFERENCES post (id)
);

CREATE TABLE comment (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	author_id INTEGER NOT NULL,
	post_id INTEGER NOT NULL,
	created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	body TEXT NOT NULL,
	FOREIGN KEY (author_id) REFERENCES user (id),
	FOREIGN KEY (post_id) REFERENCES post (id)
);

CREATE TABLE messages (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  chatroom INTEGER NOT NULL,
  sender_id INTEGER NOT NULL,
  recipient_id INTEGER NOT NULL,
  sent_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  content TEXT NOT NULL,
  FOREIGN KEY (sender_id) REFERENCES user (id),
  FOREIGN KEY (recipient_id) REFERENCES user (id),
  FOREIGN KEY (chatroom) REFERENCES chatroom (id)
);

CREATE TABLE chatroom (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  userA INTEGER NOT NULL,
  userB INTEGER NOT NULL,
  FOREIGN KEY (userA) REFERENCES user (id),
  FOREIGN KEY (userB) REFERENCES user (id)
);

CREATE TABLE like (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	user_id INTEGER NOT NULL,
	post_id INTEGER NOT NULL,
	created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES user (id),
	FOREIGN KEY (post_id) REFERENCES post (id),
	CONSTRAINT user_post_like UNIQUE (user_id, post_id)
);

CREATE TABLE follower (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	follower_user_id INTEGER NOT NULL,
	followed_user_id INTEGER NOT NULL,
	followed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY(follower_user_id) REFERENCES user (id),
	FOREIGN KEY(followed_user_id) REFERENCES user (id),
	CONSTRAINT follower_user_unique UNIQUE (follower_user_id, followed_user_id)
);